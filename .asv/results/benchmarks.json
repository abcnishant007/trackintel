{
    "benchmarks.MemSuite_Generate_staypoints.mem_all_geolife_long": {
        "code": "class MemSuite_Generate_staypoints:\n    def mem_all_geolife_long(self):\n        \"\"\"Generate sp, tpls and trips of the original pfs for subsequent testing.\"\"\"\n        pfs, _ = ti.io.dataset_reader.read_geolife(os.path.join(\"tests\", \"data\", \"geolife_long\"))\n        pfs, sp = pfs.as_positionfixes.generate_staypoints(method=\"sliding\", dist_threshold=25, time_threshold=5)\n        sp = sp.as_staypoints.create_activity_flag(time_threshold=15)\n        pfs, tpls = pfs.as_positionfixes.generate_triplegs(sp, method=\"between_staypoints\")\n        sp, tpls, trips = ti.preprocessing.triplegs.generate_trips(sp, tpls, gap_threshold=15)\n    \n        return sp, tpls, trips",
        "name": "benchmarks.MemSuite_Generate_staypoints.mem_all_geolife_long",
        "param_names": [],
        "params": [],
        "timeout": 60.0,
        "type": "memory",
        "unit": "bytes",
        "version": "e88f8122d2bedec8219e17c6d472fe57ad26f187ecbad27117d4da3c30c30a2e"
    },
    "benchmarks.MemSuite_Generate_staypoints.mem_sp_tpls_geolife_long": {
        "code": "class MemSuite_Generate_staypoints:\n    def mem_sp_tpls_geolife_long(self):\n        \"\"\"Generate sp and tpls sequences of the original pfs for subsequent testing.\"\"\"\n        pfs, _ = ti.io.dataset_reader.read_geolife(os.path.join(\"tests\", \"data\", \"geolife_long\"))\n        pfs, sp = pfs.as_positionfixes.generate_staypoints(method=\"sliding\", dist_threshold=25, time_threshold=5)\n        pfs, tpls = pfs.as_positionfixes.generate_triplegs(sp, method=\"between_staypoints\")\n    \n        tpls[\"type\"] = \"tripleg\"\n        sp[\"type\"] = \"staypoint\"\n        sp_tpls = pd.concat((sp, tpls), ignore_index=True).sort_values(by=\"started_at\")\n        return sp_tpls",
        "name": "benchmarks.MemSuite_Generate_staypoints.mem_sp_tpls_geolife_long",
        "param_names": [],
        "params": [],
        "timeout": 60.0,
        "type": "memory",
        "unit": "bytes",
        "version": "ca176577d6dbebbb056c62289f1aefb4fef59c80e0830fb42e625b3d4e528300"
    },
    "benchmarks.TimeSuite_Generate_Staypoints.time_all_geolife_long": {
        "code": "class TimeSuite_Generate_Staypoints:\n    def time_all_geolife_long(self):\n        \"\"\"Generate sp, tpls and trips of the original pfs for subsequent testing.\"\"\"\n        pfs, _ = ti.io.dataset_reader.read_geolife(os.path.join(\"tests\", \"data\", \"geolife_long\"))\n        pfs, sp = pfs.as_positionfixes.generate_staypoints(method=\"sliding\", dist_threshold=25, time_threshold=5)\n        sp = sp.as_staypoints.create_activity_flag(time_threshold=15)\n        pfs, tpls = pfs.as_positionfixes.generate_triplegs(sp, method=\"between_staypoints\")\n        sp, tpls, trips = ti.preprocessing.triplegs.generate_trips(sp, tpls, gap_threshold=15)\n    \n        return sp, tpls, trips",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite_Generate_Staypoints.time_all_geolife_long",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "6cc8e6ff9e355c04eac7e8c902dfe1b2f84e74fbcb07a451e9ed9cb84e7c036c",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite_Generate_Staypoints.time_sp_tpls_geolife_long": {
        "code": "class TimeSuite_Generate_Staypoints:\n    def time_sp_tpls_geolife_long(self):\n        \"\"\"Generate sp and tpls sequences of the original pfs for subsequent testing.\"\"\"\n        pfs, _ = ti.io.dataset_reader.read_geolife(os.path.join(\"tests\", \"data\", \"geolife_long\"))\n        pfs, sp = pfs.as_positionfixes.generate_staypoints(method=\"sliding\", dist_threshold=25, time_threshold=5)\n        pfs, tpls = pfs.as_positionfixes.generate_triplegs(sp, method=\"between_staypoints\")\n    \n        tpls[\"type\"] = \"tripleg\"\n        sp[\"type\"] = \"staypoint\"\n        sp_tpls = pd.concat((sp, tpls), ignore_index=True).sort_values(by=\"started_at\")\n        return sp_tpls",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite_Generate_Staypoints.time_sp_tpls_geolife_long",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "458d854defc7d2f2c8ca7f3ddbffab75bbfb5e9d59fc9592dba0414b3b030536",
        "warmup_time": -1
    },
    "version": 2
}