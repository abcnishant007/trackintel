{"project": "trackintel", "project_url": "https://github.com/mie-lab/trackintel/", "show_commit_url": "https://github.com/mie-lab/trackintel/commits/master", "hash_length": 8, "revision_to_hash": {"158": "c9645c4d116a515f28eb4a957b99401305a42e04", "234": "c7867a6f88978a48406b349063d225d53bf0ddfa", "264": "377a0dadab3bb8dd9f6a22fc71eb05ff09a53261", "266": "ea10a2648fd66ffce1ded50eccb2646864f3c5ca", "269": "15dc7868dc0c08d0f16e44f2f51208dd9ef2c5a8", "296": "8103e109070af3c76a744aaa0b1e596e39fa5466", "312": "4e16938603ec332274fc51e27095552b84b419c9", "313": "6139392b2b17b60ba0fba122d94cbc912fbb3c25", "342": "af3866f76fd27d3f5ddc213f9018ec792f8907d0", "363": "76bdb34fd7c0ba29ccd40cef0b0991d351066f19", "390": "4183707a8e32bc73934ca4d69c6ec347a1f79000", "391": "eb062f876bb7b4df9dfe621d01a5f372945e410a", "399": "da941204f992e7fbdd09a02e530089139dcc7d7d", "400": "5210cae9cb7d3e5003050ab40fb85391abb733a9", "402": "1545840bf08229c8fde3a4ad7d03eb78fadfbf0b", "403": "215c6fc7e8b79c7b462a48a551f0a82bb06b4f40", "409": "a877097c1fedb2ea6e500bd6b47a157bdccbb08b", "415": "ec0d41e88b642754e02298f5935fe8ceee3f0125", "425": "27d80e3320fa8046da56d9ebb4c3e6fd4a798c36", "443": "99421d651d714b0265558810dea612b6fb66ed43", "465": "0a215cd3d214045292dbd2b77d2af5b3b1df924c", "468": "942ece91a16027c083be67bbb7b7624dd2e32317"}, "revision_to_date": {"158": 1607082944000, "234": 1612362470000, "264": 1613143620000, "266": 1614162782000, "269": 1614163821000, "296": 1615221450000, "312": 1616170680000, "313": 1616173817000, "342": 1617569104000, "363": 1621460117000, "390": 1623364179000, "391": 1623364721000, "399": 1623943047000, "400": 1624572278000, "402": 1624802492000, "403": 1624802651000, "409": 1625515058000, "415": 1625781743000, "425": 1626957236000, "443": 1628858270000, "465": 1629925272000, "468": 1630327984000}, "params": {"arch": ["x86_64"], "cpu": ["2 GHz Quad-Core Intel Core i5"], "machine": ["nishant"], "num_cpu": ["4"], "os": ["Macintosh OS-X 11.3"], "ram": ["8"], "python": ["3.8"], "six": ["", null], "pytest": ["6.1.1", null], "branch": ["master"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "2 GHz Quad-Core Intel Core i5", "machine": "nishant", "num_cpu": "4", "os": "Macintosh OS-X 11.3", "ram": "8", "python": "3.8", "six": "", "branch": "master", "pytest": null}, {"arch": "x86_64", "cpu": "2 GHz Quad-Core Intel Core i5", "machine": "nishant", "num_cpu": "4", "os": "Macintosh OS-X 11.3", "ram": "8", "python": "3.8", "pytest": "6.1.1", "branch": "master", "six": null}], "benchmarks": {"preprocessing.test_triplegs.TestGenerate_trips.time_test_accessor_arguments": {"code": "class TestGenerate_trips:\n    def time_test_accessor_arguments(self):\n        \"\"\"Test if the accessor is robust to different ways to receive arguments\"\"\"\n    \n        # get geolife test data (based on positionfixes)\n        spts, tpls = example_triplegs\n    \n        # accessor with only arguments (not allowed)\n        with pytest.raises(AssertionError):\n            _, _, _ = tpls.as_triplegs.generate_trips(spts, 15)\n    \n        # accessor with only keywords\n        spts_1, tpls_1, trips_1 = tpls.as_triplegs.generate_trips(spts=spts, gap_threshold=15)\n    \n        # accessor with mixed arguments/keywords\n        spts_2, tpls_2, trips_2 = tpls.as_triplegs.generate_trips(spts, gap_threshold=15)\n    \n        # test if generated trips are equal (1,2)\n        assert_geodataframe_equal(spts_1, spts_2)\n        assert_geodataframe_equal(tpls_1, tpls_2)\n        assert_geodataframe_equal(trips_1, trips_2)", "min_run_count": 2, "name": "preprocessing.test_triplegs.TestGenerate_trips.time_test_accessor_arguments", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "efd82f22571422fda39b04c53eaaadd52e606887fc54a75ed40e32510c177cdd", "warmup_time": -1}, "preprocessing.test_triplegs.TestGenerate_trips.time_test_generate_trips": {"code": "class TestGenerate_trips:\n    def time_test_generate_trips(self):\n        \"\"\"Test if we can generate the example trips based on example data.\"\"\"\n        # load pregenerated trips\n        trips_loaded = ti.read_trips_csv(\"/Users/nishant/Documents/GitHub/trackintel/tests/data/geolife_long/trips.csv\", index_col=\"id\")\n    \n        # create trips from geolife (based on positionfixes) - with gap_threshold 1e6\n        stps, tpls = example_triplegs_higher_gap_threshold\n    \n        # generate trips and a joint staypoint/triplegs dataframe\n        stps, tpls, trips = generate_trips(stps, tpls, gap_threshold=15)\n        trips = trips[\n            [\"user_id\", \"started_at\", \"finished_at\", \"origin_staypoint_id\", \"destination_staypoint_id\", \"geom\"]\n        ]\n        # test if generated trips are equal\n        assert_geodataframe_equal(trips_loaded, trips)", "min_run_count": 2, "name": "preprocessing.test_triplegs.TestGenerate_trips.time_test_generate_trips", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8aa1621eefe7f20a8b85e4515b595eb65d4baccdae6b650f59984c909cabc503", "warmup_time": -1}, "preprocessing.test_triplegs.TestGenerate_trips.time_test_trip_coordinates": {"code": "class TestGenerate_trips:\n    def time_test_trip_coordinates(self):\n        \"\"\"Test if coordinates of start and destination are correct\"\"\"\n        # create trips from geolife (based on positionfixes) - with gap_threshold 1e6\n        stps, tpls = example_triplegs_higher_gap_threshold\n    \n        # generate trips and a joint staypoint/triplegs dataframe\n        stps, tpls, trips = ti.preprocessing.triplegs.generate_trips(stps, tpls, gap_threshold=15)\n    \n        # Check start and destination points of all rows\n        for i, row in trips.iterrows():\n            start_point_trips = row[\"geom\"][0]  # get origin Point in generated trips\n            if not pd.isna(row[\"origin_staypoint_id\"]):\n                # compare to the Point in the staypoints\n                correct_start_point = stps.loc[row[\"origin_staypoint_id\"], \"geom\"]\n            else:\n                # check if it is the first point of the tripleg\n                # get all triplegs on this trip\n                tpls_on_trip = tpls[tpls[\"trip_id\"] == row.name]\n                # correct point is the first point on the tripleg\n                correct_start_point, _ = tpls_on_trip.iloc[0][\"geom\"].boundary\n    \n            assert correct_start_point == start_point_trips\n    \n            dest_point_trips = row[\"geom\"][1]  # get destination Point in generated trips\n            if not pd.isna(row[\"destination_staypoint_id\"]):\n                correct_dest_point = stps.loc[row[\"destination_staypoint_id\"], \"geom\"]\n                # compare to the Point in the staypoints\n            else:\n                # check if it is the last point of the tripleg\n                # get all triplegs on this trip\n                tpls_on_trip = tpls[tpls[\"trip_id\"] == row.name]\n                # correct point is the first point on the tripleg\n                _, correct_dest_point = tpls_on_trip.iloc[-1][\"geom\"].boundary\n    \n            assert correct_dest_point == dest_point_trips", "min_run_count": 2, "name": "preprocessing.test_triplegs.TestGenerate_trips.time_test_trip_coordinates", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "13030700f7caf2d15c133fad04708756b086f992b67d84e5d51f49d4e040dc13", "warmup_time": -1}, "preprocessing.test_util.time_1": {"code": "@pytest.fixture\ndef time_1():\n    return datetime.datetime(year=1, month=1, day=1, hour=0, minute=0, second=0)", "min_run_count": 2, "name": "preprocessing.test_util.time_1", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "0cbfde7872c7e7106b9d3a5d3e43b7b107fccaabb8c1d93aaf2ccd86c586fc89", "warmup_time": -1}}, "machines": {"nishant": {"arch": "x86_64", "cpu": "2 GHz Quad-Core Intel Core i5", "machine": "nishant", "num_cpu": "4", "os": "Macintosh OS-X 11.3", "ram": "8", "version": 1}}, "tags": {"0.4": 158, "0.4.1": 234, "v0.0.1": 465, "v0.2.0": 465, "v0.5.0": 264, "v0.5.0.1": 266, "v0.5.0.2": 269, "v0.5.1": 296, "v0.5.2": 312, "v0.5.3": 313, "v0.6.0": 342, "v1.0.0": 363, "v1.1.0": 409, "v1.1.1": 415, "v1.1.2": 425, "v1.1.3": 443, "v1.1.4": 468}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}