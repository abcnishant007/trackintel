{"project": "trackintel", "project_url": "https://github.com/mie-lab/trackintel", "show_commit_url": "#", "hash_length": 8, "revision_to_hash": {"158": "c9645c4d116a515f28eb4a957b99401305a42e04", "234": "c7867a6f88978a48406b349063d225d53bf0ddfa", "264": "377a0dadab3bb8dd9f6a22fc71eb05ff09a53261", "266": "ea10a2648fd66ffce1ded50eccb2646864f3c5ca", "269": "15dc7868dc0c08d0f16e44f2f51208dd9ef2c5a8", "296": "8103e109070af3c76a744aaa0b1e596e39fa5466", "312": "4e16938603ec332274fc51e27095552b84b419c9", "313": "6139392b2b17b60ba0fba122d94cbc912fbb3c25", "326": "1cbecb412f30d1aa1c641e0c9f35e3ec6ca0e017", "328": "8b3482f0a4f44cf5f5de366198a39ca54ac04e75", "342": "af3866f76fd27d3f5ddc213f9018ec792f8907d0", "363": "76bdb34fd7c0ba29ccd40cef0b0991d351066f19", "409": "a877097c1fedb2ea6e500bd6b47a157bdccbb08b", "415": "ec0d41e88b642754e02298f5935fe8ceee3f0125", "425": "27d80e3320fa8046da56d9ebb4c3e6fd4a798c36", "443": "99421d651d714b0265558810dea612b6fb66ed43", "455": "6f5a314b50ec74a8e12b91e96492cc67ba29d0d8", "457": "6b60b916d258139a39e8862d5a7d00e9a7b2f59e", "468": "942ece91a16027c083be67bbb7b7624dd2e32317", "473": "8372d269c9ab2489c3a4ef7a8bf4bb04625127bb", "477": "7b135d77d3165f0443f46ec352889ae12e9946c5", "492": "e2b05907f2cd2a29913d82dfdc72ac40bf671ecf", "521": "b4bbdc1bce2fdf79fe59bce3e0b1698772d27616", "527": "fbe1c94d9c8de8e2454f7b93acd3e9a6b9cb8553", "528": "3a67d0c7dd2ac1f305b37c81a17e49365d693d79", "542": "071e56359b59f1c9d950add2afe4225565c1f5d9", "555": "89c3d3473e8b7e903490ec57df0199d74c78cb13", "561": "c585d0f49f78b2bf1f3a1cba41c979caa4ca9cb2", "567": "660b1e8c65a9f239fb61af38f25f63bbf0d4614e", "570": "c401f3d7e38f1ef60e7db877f4793c7e78f6c3bd", "582": "d4b4bd9aa2595cb98b8488b0040685fde375ef1f", "589": "af4bb8b690fb3f128ca29a78266b974319f54cc6", "592": "6d2874cdb74e152de9dfa413a14afc4488374c49", "595": "0bab520739bd2fc2a9353f090c2b41374dbe64b2", "600": "5a740fde67e99e030fb06100dd2fa0cc3f081e9c", "602": "56794962e31a4d3f75a6e0087c06be7e2a51a9d4"}, "revision_to_date": {"158": 1607082944000, "234": 1612362470000, "264": 1613143620000, "266": 1614162782000, "269": 1614163821000, "296": 1615221450000, "312": 1616170680000, "313": 1616173817000, "326": 1616990901000, "328": 1617184897000, "342": 1617569104000, "363": 1621460117000, "409": 1625515058000, "415": 1625781743000, "425": 1626957236000, "443": 1628858270000, "455": 1629497847000, "457": 1629541591000, "468": 1630327984000, "473": 1630362675000, "477": 1630429565000, "492": 1631269855000, "521": 1638980162000, "527": 1641926501000, "528": 1641933479000, "542": 1649084280000, "555": 1652953257000, "561": 1653034789000, "567": 1653313376000, "570": 1653489800000, "582": 1654557770000, "589": 1655205117000, "592": 1655808851000, "595": 1655906838000, "600": 1655971032000, "602": 1655998260000}, "params": {"arch": ["x86_64"], "cpu": ["2 GHz Quad-Core Intel Core i5"], "machine": ["nishant"], "num_cpu": ["4"], "os": ["Macintosh OS-X 11.3"], "ram": ["8"], "python": ["3.10"], "branch": ["master"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "2 GHz Quad-Core Intel Core i5", "machine": "nishant", "num_cpu": "4", "os": "Macintosh OS-X 11.3", "ram": "8", "python": "3.10", "branch": "master"}], "benchmarks": {"preprocessing_benchmarks.BM_Generate_SP.mem_gen_sp_geolife_long": {"code": "class BM_Generate_SP:\n    def mem_gen_sp_geolife_long(self):\n        self.common_func()\n\n    def setup(self):\n        self.pfs, self._ = ti.io.dataset_reader.read_geolife(os.path.join(\"tests\", \"data\", \"geolife_long\"))", "name": "preprocessing_benchmarks.BM_Generate_SP.mem_gen_sp_geolife_long", "param_names": [], "params": [], "timeout": 60.0, "type": "memory", "unit": "bytes", "version": "e09a18e4542a1c0e10e241e1b8202f24d088048cb286663dfcabe8a7006bbb16"}, "preprocessing_benchmarks.BM_Generate_SP.peakmem_gen_sp_geolife_long": {"code": "class BM_Generate_SP:\n    def peakmem_gen_sp_geolife_long(self):\n        self.common_func()\n\n    def setup(self):\n        self.pfs, self._ = ti.io.dataset_reader.read_geolife(os.path.join(\"tests\", \"data\", \"geolife_long\"))", "name": "preprocessing_benchmarks.BM_Generate_SP.peakmem_gen_sp_geolife_long", "param_names": [], "params": [], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "9751bada38ab82e1fd356b18a622cac7c0e8843652ca63c0dec2b16799cb1313"}, "preprocessing_benchmarks.BM_Generate_SP.time_gen_sp_geolife_long": {"code": "class BM_Generate_SP:\n    def time_gen_sp_geolife_long(self):\n        self.common_func()\n\n    def setup(self):\n        self.pfs, self._ = ti.io.dataset_reader.read_geolife(os.path.join(\"tests\", \"data\", \"geolife_long\"))", "min_run_count": 2, "name": "preprocessing_benchmarks.BM_Generate_SP.time_gen_sp_geolife_long", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6ede3efd67dbd8e161a52638f7521c316a8791ffb33dcabef15c3973cb8cbef8", "warmup_time": -1}, "preprocessing_benchmarks.BM_Generate_TOURS.mem_gen_tours_geolife_long": {"code": "class BM_Generate_TOURS:\n    def mem_gen_tours_geolife_long(self):\n        self.common_func()\n\n    def setup(self):\n        pfs, _ = ti.io.dataset_reader.read_geolife(os.path.join(\"tests\", \"data\", \"geolife_long\"))\n        pfs, sp = pfs.as_positionfixes.generate_staypoints(method=\"sliding\", dist_threshold=25, time_threshold=5)\n        pfs, tpls = pfs.as_positionfixes.generate_triplegs(sp, method=\"between_staypoints\")\n        sp = sp.as_staypoints.create_activity_flag(time_threshold=15)\n        _, _, self.trips = ti.preprocessing.triplegs.generate_trips(sp, tpls)", "name": "preprocessing_benchmarks.BM_Generate_TOURS.mem_gen_tours_geolife_long", "param_names": [], "params": [], "timeout": 60.0, "type": "memory", "unit": "bytes", "version": "abc01db8469e5b462d785646cf5e469cff8434b6e38abc8c0b4ca97b5fdff26a"}, "preprocessing_benchmarks.BM_Generate_TOURS.peakmem_gen_tours_geolife_long": {"code": "class BM_Generate_TOURS:\n    def peakmem_gen_tours_geolife_long(self):\n        self.common_func()\n\n    def setup(self):\n        pfs, _ = ti.io.dataset_reader.read_geolife(os.path.join(\"tests\", \"data\", \"geolife_long\"))\n        pfs, sp = pfs.as_positionfixes.generate_staypoints(method=\"sliding\", dist_threshold=25, time_threshold=5)\n        pfs, tpls = pfs.as_positionfixes.generate_triplegs(sp, method=\"between_staypoints\")\n        sp = sp.as_staypoints.create_activity_flag(time_threshold=15)\n        _, _, self.trips = ti.preprocessing.triplegs.generate_trips(sp, tpls)", "name": "preprocessing_benchmarks.BM_Generate_TOURS.peakmem_gen_tours_geolife_long", "param_names": [], "params": [], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "e9a99156a691b4469b37fca4ef52a2a9710d6251303b88f4970e2df5cf1ee4cd"}, "preprocessing_benchmarks.BM_Generate_TOURS.time_gen_tours_geolife_long": {"code": "class BM_Generate_TOURS:\n    def time_gen_tours_geolife_long(self):\n        self.common_func()\n\n    def setup(self):\n        pfs, _ = ti.io.dataset_reader.read_geolife(os.path.join(\"tests\", \"data\", \"geolife_long\"))\n        pfs, sp = pfs.as_positionfixes.generate_staypoints(method=\"sliding\", dist_threshold=25, time_threshold=5)\n        pfs, tpls = pfs.as_positionfixes.generate_triplegs(sp, method=\"between_staypoints\")\n        sp = sp.as_staypoints.create_activity_flag(time_threshold=15)\n        _, _, self.trips = ti.preprocessing.triplegs.generate_trips(sp, tpls)", "min_run_count": 2, "name": "preprocessing_benchmarks.BM_Generate_TOURS.time_gen_tours_geolife_long", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1788b9923959c3e52dbcd959767c2f855aedaed263a1e4f56b02e504468d939b", "warmup_time": -1}, "preprocessing_benchmarks.BM_Generate_TPLS.mem_gen_tpls_geolife_long": {"code": "class BM_Generate_TPLS:\n    def mem_gen_tpls_geolife_long(self):\n        self.common_func()\n\n    def setup(self):\n        self.pfs, self._ = ti.io.dataset_reader.read_geolife(os.path.join(\"tests\", \"data\", \"geolife_long\"))\n        self.pfs, self.sp = self.pfs.as_positionfixes.generate_staypoints(\n            method=\"sliding\", dist_threshold=25, time_threshold=5\n        )", "name": "preprocessing_benchmarks.BM_Generate_TPLS.mem_gen_tpls_geolife_long", "param_names": [], "params": [], "timeout": 60.0, "type": "memory", "unit": "bytes", "version": "2f7da3f807b9c403d6d344cd9ed543ee9cbbfa1a7766bb0e925e6837ce5d2c5b"}, "preprocessing_benchmarks.BM_Generate_TPLS.peakmem_gen_tpls_geolife_long": {"code": "class BM_Generate_TPLS:\n    def peakmem_gen_tpls_geolife_long(self):\n        self.common_func()\n\n    def setup(self):\n        self.pfs, self._ = ti.io.dataset_reader.read_geolife(os.path.join(\"tests\", \"data\", \"geolife_long\"))\n        self.pfs, self.sp = self.pfs.as_positionfixes.generate_staypoints(\n            method=\"sliding\", dist_threshold=25, time_threshold=5\n        )", "name": "preprocessing_benchmarks.BM_Generate_TPLS.peakmem_gen_tpls_geolife_long", "param_names": [], "params": [], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "7bf7cb9ee7f04b83c6e9e52c20273625fe9073ef723d03bae0d8ddfbd568128c"}, "preprocessing_benchmarks.BM_Generate_TPLS.time_gen_tpls_geolife_long": {"code": "class BM_Generate_TPLS:\n    def time_gen_tpls_geolife_long(self):\n        self.common_func()\n\n    def setup(self):\n        self.pfs, self._ = ti.io.dataset_reader.read_geolife(os.path.join(\"tests\", \"data\", \"geolife_long\"))\n        self.pfs, self.sp = self.pfs.as_positionfixes.generate_staypoints(\n            method=\"sliding\", dist_threshold=25, time_threshold=5\n        )", "min_run_count": 2, "name": "preprocessing_benchmarks.BM_Generate_TPLS.time_gen_tpls_geolife_long", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d14d674760c59f3c40b11f1ea94c6b216cbe8b144e2485ba9027d1d88ef59aad", "warmup_time": -1}, "preprocessing_benchmarks.BM_Generate_TRIPS.mem_gen_trips_geolife_long": {"code": "class BM_Generate_TRIPS:\n    def mem_gen_trips_geolife_long(self):\n        self.common_func()\n\n    def setup(self):\n        pfs, _ = ti.io.dataset_reader.read_geolife(os.path.join(\"tests\", \"data\", \"geolife_long\"))\n        pfs, sp = pfs.as_positionfixes.generate_staypoints(method=\"sliding\", dist_threshold=25, time_threshold=5)\n        pfs, self.tpls = pfs.as_positionfixes.generate_triplegs(sp, method=\"between_staypoints\")\n        self.sp = sp.as_staypoints.create_activity_flag(time_threshold=15)", "name": "preprocessing_benchmarks.BM_Generate_TRIPS.mem_gen_trips_geolife_long", "param_names": [], "params": [], "timeout": 60.0, "type": "memory", "unit": "bytes", "version": "8dd1e4338e5c0d633e727761902c85040cebaae0fcd9acbdd15f9c1105c7aadb"}, "preprocessing_benchmarks.BM_Generate_TRIPS.peakmem_gen_trips_geolife_long": {"code": "class BM_Generate_TRIPS:\n    def peakmem_gen_trips_geolife_long(self):\n        self.common_func()\n\n    def setup(self):\n        pfs, _ = ti.io.dataset_reader.read_geolife(os.path.join(\"tests\", \"data\", \"geolife_long\"))\n        pfs, sp = pfs.as_positionfixes.generate_staypoints(method=\"sliding\", dist_threshold=25, time_threshold=5)\n        pfs, self.tpls = pfs.as_positionfixes.generate_triplegs(sp, method=\"between_staypoints\")\n        self.sp = sp.as_staypoints.create_activity_flag(time_threshold=15)", "name": "preprocessing_benchmarks.BM_Generate_TRIPS.peakmem_gen_trips_geolife_long", "param_names": [], "params": [], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "8a7d98064d7cf17808f1b1674b8f3b47f5211e549cc5d89f35a4ba4422051a19"}, "preprocessing_benchmarks.BM_Generate_TRIPS.time_gen_trips_geolife_long": {"code": "class BM_Generate_TRIPS:\n    def time_gen_trips_geolife_long(self):\n        self.common_func()\n\n    def setup(self):\n        pfs, _ = ti.io.dataset_reader.read_geolife(os.path.join(\"tests\", \"data\", \"geolife_long\"))\n        pfs, sp = pfs.as_positionfixes.generate_staypoints(method=\"sliding\", dist_threshold=25, time_threshold=5)\n        pfs, self.tpls = pfs.as_positionfixes.generate_triplegs(sp, method=\"between_staypoints\")\n        self.sp = sp.as_staypoints.create_activity_flag(time_threshold=15)", "min_run_count": 2, "name": "preprocessing_benchmarks.BM_Generate_TRIPS.time_gen_trips_geolife_long", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b363eda11ec95287bd30f498390b3928ac7253112d434e28909469d6d8dfa933", "warmup_time": -1}, "preprocessing_benchmarks.BM_Read_PFS.mem_read_pfs": {"code": "class BM_Read_PFS:\n    def mem_read_pfs(self):\n        self.common_func()", "name": "preprocessing_benchmarks.BM_Read_PFS.mem_read_pfs", "param_names": [], "params": [], "timeout": 60.0, "type": "memory", "unit": "bytes", "version": "0fa8132c01c1fa981a769ee0092550412d7b8737ee16ac44032015f1ad7b9e45"}, "preprocessing_benchmarks.BM_Read_PFS.peakmem_read_pfs": {"code": "class BM_Read_PFS:\n    def peakmem_read_pfs(self):\n        self.common_func()", "name": "preprocessing_benchmarks.BM_Read_PFS.peakmem_read_pfs", "param_names": [], "params": [], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "25bf18b44cc7682e346f5eda52f22fa6ef55016e3f5ebcd59b8107d8a5238a0e"}, "preprocessing_benchmarks.BM_Read_PFS.time_read_pfs": {"code": "class BM_Read_PFS:\n    def time_read_pfs(self):\n        self.common_func()", "min_run_count": 2, "name": "preprocessing_benchmarks.BM_Read_PFS.time_read_pfs", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c91dcfb6e7b0d4b9d8d9bf6337ee25133688745ed6c8cee5703ea68517e7adcf", "warmup_time": -1}}, "machines": {"nishant": {"arch": "x86_64", "cpu": "2 GHz Quad-Core Intel Core i5", "machine": "nishant", "num_cpu": "4", "os": "Macintosh OS-X 11.3", "ram": "8", "version": 1}}, "tags": {"0.4": 158, "0.4.1": 234, "1.1.8": 570, "v0.5.0": 264, "v0.5.0.1": 266, "v0.5.0.2": 269, "v0.5.1": 296, "v0.5.2": 312, "v0.5.3": 313, "v0.6.0": 342, "v1.0.0": 363, "v1.1.0": 409, "v1.1.1": 415, "v1.1.10": 602, "v1.1.2": 425, "v1.1.3": 443, "v1.1.4": 468, "v1.1.5": 521, "v1.1.6": 555, "v1.1.7": 561, "v1.1.9": 582}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}